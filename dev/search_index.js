var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = TextClassification","category":"page"},{"location":"#TextClassification","page":"Home","title":"TextClassification","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [TextClassification]","category":"page"},{"location":"#TextClassification.MicroTC-Tuple{MicroTC_Config, AbstractVector, Any}","page":"Home","title":"TextClassification.MicroTC","text":"MicroTC(\n    config::MicroTC_Config,\n    train_corpus::AbstractVector,\n    train_y;\n    textconfig=config.textconfig,\n    verbose=true)\nMicroTC(config::MicroTC_Config, textmodel::TextModel, train_X::AbstractVector{S}, train_y; verbose=true) where {S<:SVEC}\n\nCreates a MicroTC model on the given dataset and configuration\n\n\n\n\n\n","category":"method"},{"location":"#StatsAPI.predict-Tuple{MicroTC, Any}","page":"Home","title":"StatsAPI.predict","text":"predict(tc::MicroTC, text)\npredict(tc::MicroTC, vec::SVEC)\n\nPredicts the label of the given input\n\n\n\n\n\n","category":"method"},{"location":"#TextClassification.accuracy_score-Tuple{AbstractVector, AbstractVector}","page":"Home","title":"TextClassification.accuracy_score","text":"accuracy_score(gold, predicted)\n\nComputes the accuracy score between the gold and the predicted sets\n\n\n\n\n\n","category":"method"},{"location":"#TextClassification.classification_scores-Tuple{AbstractVector, AbstractVector}","page":"Home","title":"TextClassification.classification_scores","text":"classification_scores(gold, predicted; labelnames=nothing)\n\nComputes several scores for the given gold-standard and predictions, namely:  precision, recall, and f1 scores, for global and per-class granularity. If labelnames is given, then it is an array of label names.\n\n\n\n\n\n","category":"method"},{"location":"#TextClassification.f1_score-Tuple{Any, Any}","page":"Home","title":"TextClassification.f1_score","text":"f1_score(gold, predicted; weight=:macro)::Float64\n\nIt computes the F1 score between the gold dataset and the list of predictions predicted\n\nIt applies the desired weighting scheme for binary and multiclass problems\n\n:macro performs a uniform weigth to each class\n:weigthed the weight of each class is proportional to its population in gold\n:micro returns the global F1, without distinguishing among classes\n\n\n\n\n\n","category":"method"},{"location":"#TextClassification.isqerror-Union{Tuple{F}, Tuple{AbstractVector{F}, AbstractVector{F}}} where F<:AbstractFloat","page":"Home","title":"TextClassification.isqerror","text":"isqerror(X::AbstractVector{F}, Y::AbstractVector{F}) where {F <: AbstractFloat}\n\nNegative squared error (to be used for maximizing algorithms)\n\n\n\n\n\n","category":"method"},{"location":"#TextClassification.pearson-Union{Tuple{F}, Tuple{AbstractVector{F}, AbstractVector{F}}} where F<:AbstractFloat","page":"Home","title":"TextClassification.pearson","text":"pearson(X::AbstractVector{F}, Y::AbstractVector{F}) where {F <: AbstractFloat}\n\nPearson correlation score\n\n\n\n\n\n","category":"method"},{"location":"#TextClassification.precision_recall-Tuple{AbstractVector, AbstractVector}","page":"Home","title":"TextClassification.precision_recall","text":"precision_recall(gold::AbstractVector, predicted::AbstractVector)\n\nComputes the global and per-class precision and recall values between the gold standard and the predicted set\n\n\n\n\n\n","category":"method"},{"location":"#TextClassification.precision_score-Tuple{Any, Any}","page":"Home","title":"TextClassification.precision_score","text":"precision_score(gold, predicted; weight=:macro)::Float64\n\nIt computes the precision between the gold dataset and the list of predictions predict\n\nIt applies the desired weighting scheme for binary and multiclass problems\n\n:macro performs a uniform weigth to each class\n:weigthed the weight of each class is proportional to its population in gold\n:micro returns the global precision, without distinguishing among classes\n\n\n\n\n\n","category":"method"},{"location":"#TextClassification.recall_score-Tuple{Any, Any}","page":"Home","title":"TextClassification.recall_score","text":"recall_score(gold, predicted; weight=:macro)::Float64\n\nIt computes the recall between the gold dataset and the list of predictions predict\n\nIt applies the desired weighting scheme for binary and multiclass problems\n\n:macro performs a uniform weigth to each class\n:weigthed the weight of each class is proportional to its population in gold\n:micro returns the global recall, without distinguishing among classes\n\n\n\n\n\n","category":"method"},{"location":"#TextClassification.spearman-Union{Tuple{F}, Tuple{AbstractVector{F}, AbstractVector{F}}} where F<:AbstractFloat","page":"Home","title":"TextClassification.spearman","text":"spearman(X::AbstractVector{F}, Y::AbstractVector{F}) where {F <: AbstractFloat}\n\nSpearman rank correleation score\n\n\n\n\n\n","category":"method"},{"location":"#TextSearch.vectorize-Tuple{MicroTC, Any}","page":"Home","title":"TextSearch.vectorize","text":"vectorize(tc::MicroTC, text; bow=BOW(), textconfig=tc.textconfig, normalize=true)\nvectorize(tc::MicroTC, bow::BOW; normalize=true)\n\nCreates a weighted vector using the model. The input text can be a string or an array of strings; it also can be an already computed bag of words.\n\n\n\n\n\n","category":"method"}]
}
